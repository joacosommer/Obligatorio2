/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package InterfazUI;

import Dominio.*;
import java.awt.event.*;
import java.awt.*;
import java.io.InputStream;
import javax.swing.*;
import java.util.ArrayList;
import java.util.*;
import javax.swing.JList;
import sun.audio.AudioPlayer;
import sun.audio.AudioStream;

/**
 *
 * @author Joaquin
 */
public class Tablero2 extends javax.swing.JFrame {

    private JButton[][] botones;
    private Sistema sistema;
    private Tablero tablero;
    private Partida unaP;
    //private int movi;
    Validaciones1 validaciones = new Validaciones1();
    private ArrayList<int[]> coordenadasGuardadas = new ArrayList<int[]>();
    private Jugador jugadorTurno;
    private ArrayList<Pieza> jugadasPosibles;
    private int contador = 0;

    public Tablero2(Partida unaP, Tablero tablero, Sistema sistema) {
        initComponents();
        this.setSistema(sistema);

        this.setTablero(tablero);
        this.setUnaP(unaP);
        unaP.setFecha();
        panelJuego.setLayout(new GridLayout(8, 9));
        botones = new JButton[9][10];

        jLabel6.setText(unaP.getJugadorAzul().getAlias());
        jLabel8.setText(unaP.getJugadorRojo().getAlias());

        for (int i = 1; i <= 8; i++) {
            for (int j = 1; j <= 9; j++) {
                JButton jButton = new JButton();
                jButton.addActionListener(new ListenerBoton(i, j));
                panelJuego.add(jButton);
                botones[i][j] = jButton;
                botones[i][j].setMargin(new Insets(8, 8, 8, 8));
                if (tablero.getTablero()[i - 1][j - 1].getColor() == "Rojo") {
                    botones[i][j].setBackground(Color.RED);
                } else if (tablero.getTablero()[i - 1][j - 1].getColor() == "Azul") {
                    botones[i][j].setBackground(Color.BLUE);
                } else {
                    botones[i][j].setBackground(Color.GRAY);
                }
                if (tablero.getTablero()[i - 1][j - 1].getValor() != 0) {
                    jButton.setText(Integer.toString(tablero.getTablero()[i - 1][j - 1].getValor()));
                }
            }
        }
        ArrayList<Pieza> piezas = new ArrayList();
        Jugador turno = new Jugador();
        if (unaP.getListaJugadas().size() == 0) {
            piezas = sistema.piezasRojo();
            turno = unaP.getJugadorRojo();
        } else {
            Pieza pi = unaP.getListaJugadas().get(unaP.getListaJugadas().size() - 1).getPieza();
            piezas = sistema.piezasMovibles(tablero, pi);
            turno = unaP.getListaJugadas().get(unaP.getListaJugadas().size() - 1).getJugador();
            if (sistema.piezasMovibles(tablero, pi).size() != 0) {
                turno = unaP.getListaJugadas().get(unaP.getListaJugadas().size() - 1).getJugador();
            } else {
                if (turno == unaP.getJugadorRojo()) {
                    turno = unaP.getJugadorAzul();
                    piezas = sistema.primerPiezasAzul(tablero, jugadorTurno);
                } else {
                    turno = unaP.getJugadorRojo();
                    piezas = sistema.primerPiezasRojos(tablero, jugadorTurno);

                }
            }
        }

        DefaultListModel<String> model = new DefaultListModel<>();
        for (int i = 0; i < piezas.size(); i++) {
            model.addElement(Integer.toString(piezas.get(i).getValor()));
        }
        jList1.setModel(model);
        jugadorTurno = turno;
        jugadasPosibles = piezas;

        labelTurnos();

    }

    public Jugador getJugadorTurno() {
        return jugadorTurno;
    }

    public void setJugadorTurno(Jugador jugadorTurno) {
        this.jugadorTurno = jugadorTurno;
    }

    public Tablero getTablero() {
        return tablero;
    }

    public void setTablero(Tablero tablero) {
        this.tablero = tablero;
    }

    public Partida getUnaP() {
        return unaP;
    }

    public void setUnaP(Partida unaP) {
        this.unaP = unaP;
    }

    /*public int getMovi() {
        return movi;
    }

    public void setMovi(int movi) {
        this.movi = movi;
    }*/
    public Sistema getSistema() {
        return sistema;
    }

    public void setSistema(Sistema unSistema) {
        this.sistema = unSistema;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelJuego = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(700, 490));
        setResizable(false);
        setSize(new java.awt.Dimension(0, 0));
        getContentPane().setLayout(null);

        panelJuego.setBackground(new java.awt.Color(0, 0, 0));
        getContentPane().add(panelJuego);
        panelJuego.setBounds(0, 0, 490, 460);

        jLabel2.setForeground(new java.awt.Color(0, 0, 204));
        jLabel2.setText("Jugador Azul:");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 204));
        jLabel1.setText("TURNO AZUL");

        jLabel4.setForeground(new java.awt.Color(255, 0, 0));
        jLabel4.setText("Jugador Rojo:");

        jLabel5.setText("Jugadas Posibles:");

        jList1.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        jLabel6.setForeground(new java.awt.Color(0, 0, 204));
        jLabel6.setText("jugadorAzul");

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 0, 0));
        jLabel7.setText("TURNO ROJO");

        jLabel8.setForeground(new java.awt.Color(255, 0, 0));
        jLabel8.setText("jugadorRojo");

        jButton1.setForeground(new java.awt.Color(255, 0, 0));
        jButton1.setText("Abandonar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setForeground(new java.awt.Color(0, 0, 204));
        jButton2.setText("Abandonar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Pasar turno");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(44, 44, 44)
                                .addComponent(jLabel1))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(42, 42, 42)
                                .addComponent(jLabel7)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(0, 25, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jButton1)
                                            .addComponent(jButton2))
                                        .addGap(82, 82, 82))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(10, 10, 10)
                                                .addComponent(jButton3)))
                                        .addGap(21, 21, 21)))))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton3)
                .addGap(26, 26, 26)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addGap(16, 16, 16))
        );

        getContentPane().add(jPanel1);
        jPanel1.setBounds(488, 0, 212, 460);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if (contador != 0) {
            cambiarTurno();
            contador = 0;
        }
        refreshJugadas(jugadasPosibles);
        labelTurnos();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        unaP.getJugadorRojo().sumarUnaGanada();
        sistema.agregarPartida(unaP);
        TerminoPartida ventana = new TerminoPartida(unaP.getJugadorRojo());
        ventana.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        unaP.getJugadorAzul().sumarUnaGanada();
        sistema.agregarPartida(unaP);
        TerminoPartida ventana = new TerminoPartida(unaP.getJugadorAzul());
        ventana.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel panelJuego;
    // End of variables declaration//GEN-END:variables

    private class ListenerBoton implements ActionListener {

        private int x;
        private int y;

        public ListenerBoton(int i, int j) {
// en el constructor se almacena la fila y columna que se presionó
            x = i;
            y = j;
        }

        public void actionPerformed(ActionEvent e) {
// cuando se presiona un botón, se ejecutará este método
            clickBoton(x, y);
        }
    }

    private void clickBoton(int fila, int columna) {
        int[] pos = new int[2];
        pos[0] = fila - 1;
        pos[1] = columna - 1;

        if (tablero.getTablero()[pos[0]][pos[1]].getValor() != 0 && jugadasPosibles.contains(tablero.getTablero()[pos[0]][pos[1]])) {
            coordenadasGuardadas.add(new int[]{pos[0], pos[1]});
        }

        if (coordenadasGuardadas.size() > 0) {

            Pieza p = new Pieza();

            String movida = jugada(coordenadasGuardadas.get(coordenadasGuardadas.size() - 1), pos, jugadorTurno);
            if (movida == "NO" && tablero.getTablero()[pos[0]][pos[1]].getValor() == 0) {
                sonido();
                JOptionPane.showMessageDialog(this, "Movimiento no valido",
                        "Error", JOptionPane.OK_OPTION);

            } else {
                if (tablero.getTablero()[pos[0]][pos[1]].getValor() == 0 && coordenadasGuardadas.size() > 0) {
                    p = tablero.getTablero()[coordenadasGuardadas.get(coordenadasGuardadas.size() - 1)[0]][coordenadasGuardadas.get(coordenadasGuardadas.size() - 1)[1]];
                    tablero.getTablero()[pos[0]][pos[1]] = p;
                    Pieza q = new Pieza();
                    tablero.getTablero()[coordenadasGuardadas.get(coordenadasGuardadas.size() - 1)[0]][coordenadasGuardadas.get(coordenadasGuardadas.size() - 1)[1]] = q;
                    Jugada j = new Jugada();
                    char dire = jugada(coordenadasGuardadas.get(coordenadasGuardadas.size() - 1), pos, jugadorTurno).charAt(1);
                    j.setDireccion(dire);
                    j.setJugador(jugadorTurno);
                    if (jugadorTurno == unaP.getJugadorRojo()) {
                        j.setPieza(tablero.buscarPiezaRoja(movida, tablero.getTablero()));
                    }
                    if (jugadorTurno == unaP.getJugadorAzul()) {
                        j.setPieza(tablero.buscarPiezaAzul(movida, tablero.getTablero()));
                    }
                    unaP.setListaJugadas(j);

                    coordenadasGuardadas.clear();
                    contador++;
                    jugadasPosibles = sistema.piezasMovibles(tablero, p);
                }

            }
        }

        if (sistema.terminaPartida(unaP, unaP.getMovi(), tablero.getTablero())
                || sistema.todasOpuesto(tablero.getTablero())
                || (sistema.primerPiezasAzul(tablero, unaP.getJugadorAzul()).size() == 0 
                && sistema.primerPiezasAzul(tablero, unaP.getJugadorRojo()).size() == 0)) {
            if (ganador(unaP, tablero) == "ganoRojo") {
                TerminoPartida ventana = new TerminoPartida(unaP.getJugadorRojo());
                ventana.setVisible(true);
            } else if (ganador(unaP, tablero) == "ganoAzul") {
                TerminoPartida ventana = new TerminoPartida(unaP.getJugadorAzul());
                ventana.setVisible(true);
            } else {
                JOptionPane.showMessageDialog(this, "Empate",
                        "Empate", JOptionPane.OK_OPTION);
            }
            sistema.agregarPartida(unaP);
            this.dispose();
        }
        if (jugadasPosibles.size() == 0) {
            cambiarTurno();
            contador = 0;
        }

        refresh();
        refreshJugadas(jugadasPosibles);
        labelTurnos();

    }

    public String ganador(Partida unaP, Tablero tablero) {
        boolean ganoRojo = false;
        boolean ganoAzul = false;
        boolean empate = false;
        int[] sumaM = sistema.sumaMitades(tablero.getTablero());
        int[] sumaL = sistema.sumaLados(tablero.getTablero());
        if (unaP.getTipoPartida() == 1
                && !sistema.todasOpuesto(tablero.getTablero())) {
            if (sumaM[0] > sumaM[1]) {
                ganoRojo = true;
            } else if (sumaM[0] < sumaM[1]) {
                ganoAzul = true;
            } else {
                empate = true;
            }
        } else {
            if (sumaL[0] > sumaL[1]) {
                ganoRojo = true;
            }
            if (sumaL[0] < sumaL[1]) {
                ganoAzul = true;
            }
        }

        if (ganoRojo == true) {
            unaP.getJugadorRojo().sumarUnaGanada();
            return "ganoRojo";
        }
        if (ganoAzul == true) {
            unaP.getJugadorAzul().sumarUnaGanada();
            return "ganoAzul";
        }
        return "empate";
    }

    public void labelTurnos() {
        if (jugadorTurno == unaP.getJugadorRojo()) {
            jLabel1.setVisible(false);
            jLabel7.setVisible(true);
        } else {
            jLabel7.setVisible(false);
            jLabel1.setVisible(true);
        }
    }

    public void cambiarTurno() {
        if (jugadorTurno == unaP.getJugadorRojo()) {
            jugadorTurno = unaP.getJugadorAzul();
            jugadasPosibles = sistema.primerPiezasAzul(tablero, jugadorTurno);

        } else {
            jugadorTurno = unaP.getJugadorRojo();
            jugadasPosibles = sistema.primerPiezasRojos(tablero, jugadorTurno);

        }
    }

    public void refreshJugadas(ArrayList<Pieza> piezas) {
        DefaultListModel<String> model = new DefaultListModel<>();
        for (int i = 0; i < piezas.size(); i++) {
            model.addElement(Integer.toString(piezas.get(i).getValor()));
        }
        jList1.setModel(model);
    }

    public Pieza devolverPieza(int[] pos) {
        Pieza p = new Pieza();
        p = tablero.getTablero()[pos[0]][pos[1]];
        return p;
    }

    public void refresh() {
        for (int i = 1; i <= 8; i++) {
            for (int j = 1; j <= 9; j++) {
                if (tablero.getTablero()[i - 1][j - 1].getColor() == "Rojo") {
                    botones[i][j].setBackground(Color.RED);
                } else if (tablero.getTablero()[i - 1][j - 1].getColor() == "Azul") {
                    botones[i][j].setBackground(Color.BLUE);
                } else {
                    botones[i][j].setBackground(Color.GRAY);
                }
                if (tablero.getTablero()[i - 1][j - 1].getValor() != 0) {
                    botones[i][j].setText(Integer.toString(tablero.getTablero()[i - 1][j - 1].getValor()));
                }
                if (tablero.getTablero()[i - 1][j - 1].getValor() == 0) {
                    botones[i][j].setText("");
                }

            }
        }
    }

    public String jugada(int[] posV, int[] posN, Jugador jugadorTurno) {
        String devo = "NO";
        if (jugadorTurno == unaP.getJugadorRojo()) {
            if (posN[0] == posV[0] - 1 && posN[1] == posV[1]) {
                devo = tablero.getTablero()[posV[0]][posV[1]].getValor() + "A";
            } else if (posN[0] == posV[0] - 1 && posN[1] == posV[1] + 1) {
                devo = tablero.getTablero()[posV[0]][posV[1]].getValor() + "D";
            } else if (posN[0] == posV[0] - 1 && posN[1] == posV[1] - 1) {
                devo = tablero.getTablero()[posV[0]][posV[1]].getValor() + "I";
            }
        }
        if (jugadorTurno == unaP.getJugadorAzul()) {
            if (posN[0] == posV[0] + 1 && posN[1] == posV[1]) {
                devo = tablero.getTablero()[posV[0]][posV[1]].getValor() + "A";
            } else if (posN[0] == posV[0] + 1 && posN[1] == posV[1] + 1) {
                devo = tablero.getTablero()[posV[0]][posV[1]].getValor() + "D";
            } else if (posN[0] == posV[0] + 1 && posN[1] == posV[1] - 1) {
                devo = tablero.getTablero()[posV[0]][posV[1]].getValor() + "I";
            }
        }
        return devo;
    }

    public void sonido() {
        InputStream soundName;
        try {
            soundName = getClass().getResourceAsStream("/sonidos2/prueba.wav");
            AudioStream audioStream = new AudioStream(soundName);
            AudioPlayer.player.start(audioStream);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e);
        }
    }
}
